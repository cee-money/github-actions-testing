# Create an ephemeral deployment of the head branch for PRs to the sprint branch
name: FEATURE_FIX_DEPLOYMENTS

on:
  pull_request_target:
    branches: ["sprint/**", "main"]

jobs:
  # Runs NPM build and uploads the files to a specific ephemeral deployment
  # path. This deployment path is determined by the branch name formatted as
  # feature/<ticket>/<description> or bugfix/<ticket>/<description> or
  # hotfix/<ticket>/<description>
  build_and_deploy:
    if: |
      (startsWith(github.event.pull_request.head.ref, 'feature') && startsWith(github.event.pull_request.base.ref, 'sprint')) || 
      (startsWith(github.event.pull_request.head.ref, 'bugfix') && startsWith(github.event.pull_request.base.ref, 'sprint')) ||
      (!startsWith(github.event.pull_request.head.ref, 'sprint') && github.event.pull_request.base.ref == 'main')
    runs-on: ubuntu-latest
    strategy:
      matrix:
        node-version: [16.x]

    steps:
      # comcast-runner runs a old git client. We need to install the latest
      # to actually get a git clone, since npm needs a valid git repository.
      - name: Force Install GIT latest
        run: |
          sudo apt-get install -y software-properties-common \
          && sudo add-apt-repository -y ppa:git-core/ppa \
          && sudo apt-get update \
          && sudo apt-get update \
          && sudo apt-get install -y git jq

      - name: Set Variables from Github
        id: vars
        run: |
          BRANCH_NAME=${{ github.event.pull_request.head.ref }}
          NTID=$(echo ${{ github.event.pull_request.user.login }} | cut -d '_' -f1)
          FEATURE_NAME=$(echo ${BRANCH_NAME} | cut -d '/' -f3)
          EPHEMERAL_DEPLOYMENT_NAME="ephemeral/${NTID}/${FEATURE_NAME}"
          DEPLOYMENT_URL="https://gamex.np.gpe.xfinity.com/${EPHEMERAL_DEPLOYMENT_NAME}/index.html#$"
          echo ::set-output name=ephemeral_deployment_name::${EPHEMERAL_DEPLOYMENT_NAME}
          echo ::set-output name=short_ref::${BRANCH_NAME}
          echo ::set-output name=pr_author::${NTID}
          echo ::set-output name=deployment_url::${DEPLOYMENT_URL}
          echo ::set-output name=run_number::${GITHUB_RUN_NUMBER}

      - name: Comment deployment env URL on PR
        if: ${{ success() }}
        env:
          URL: ${{ github.event.pull_request.comments_url }}
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          curl \
            -X POST \
            $URL \
            -H "Content-Type: application/json" \
            -H "Authorization: token $GITHUB_TOKEN" \
            --data '{ "body": "Test env ${{ steps.vars.outputs.deployment_url }}" }'

      # - name: Checkout to repository
      #   uses: actions/checkout@v3
      #   with:
      #     fetch-depth: 0

      # - name: Check for remote branch
      #   id: branch_active
      #   run: |
      #     git fetch --all
      #     git pull --all
      #     FULL_NAME=main
      #     BRANCH_ACTIVE=$(echo git ls-remote --heads 2>/dev/null|awk -F 'refs/heads/' '{print $2}'|grep -x 'main' |wc -l)
      #     echo "branch_active=${BRANCH_ACTIVE}" >> $GITHUB_OUTPUT

      # - name: Debug
      #   run: $(echo ${{ steps.outputs.branch_active.branch_active }} | sed 's/./& /g')

      # - name: Comment deployment env URL on PR
      #   if: |
      #     success() &&
      #     steps.outputs.branch_active.branch_active == 1
      #   env:
      #     URL: ${{ github.event.pull_request.comments_url }}
      #     GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      #   run: |
      #     curl \
      #       -X POST \
      #       $URL \
      #       -H "Content-Type: application/json" \
      #       -H "Authorization: token $GITHUB_TOKEN" \
      #       --data '{ "body": "Test env ${{ steps.vars.outputs.deployment_url }}" }'
