# Create a temporary deployment for PRs to sprint branch
name: FEATURE_FIX_DEPLOYMENT

on:
  pull_request_target:
    branches: ["sprint/**"]

jobs:
  # runs NPM build and uploads the files to a specific ephemeral deployment
  # path. This is determined from the branch name in the format
  # feature/<ticket-num>/<short-description> or bugfix/<ticket-num>/<short-description>
  build_and_deploy:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        node-version: [16.x]

    steps:
      # comcast-runner runs a old git client. We need to install the latest
      # to actually get a git clone, since npm needs a valid git repository.
      - name: Force Install GIT latest
        run: |
          sudo apt-get install -y software-properties-common \
          && sudo add-apt-repository -y ppa:git-core/ppa \
          && sudo apt-get update \
          && sudo apt-get update \
          && sudo apt-get install -y git jq

      - name: Set Variables from Github
        id: vars
        run: |
          BRANCH_NAME=${{ github.event.pull_request.head.ref }}
          ID=$(echo 'cee-money' | cut -d '_' -f1)
          FEATURE_NAME=$(echo ${BRANCH_NAME} | cut -d '/' -f3)
          EPHEMERAL_DEPLOYMENT_NAME="ephemeral/${ID}/${FEATURE_NAME}"
          DEPLOYMENT_URL="https://abc.com/${EPHEMERAL_DEPLOYMENT_NAME}"
          echo ::set-output name=ephemeral_deployment_name::${EPHEMERAL_DEPLOYMENT_NAME}
          echo ::set-output name=short_ref::${BRANCH_NAME}
          echo ::set-output name=pr_author::${ID}
          echo ::set-output name=deployment_url::${DEPLOYMENT_URL}

      - name: Checkout to repository
        uses: actions/checkout@v3

      - name: Check if head branch was deleted
        id: branch_active
        run: |
         git fetch origin
         FULL_NAME=${{ github.event.pull_request.head.ref }}
         BRANCH_ACTIVE=git ls-remote --heads 2>/dev/null|awk -F 'refs/heads/' '{print $2}'|grep -x 'feature/ABC-123/this-is-the-feature'|wc -l
         echo "branch_active=${BRANCH_ACTIVE}" >> $GITHUB_OUTPUT

      - name: Comment deployment env URL on PR
        if: |
          success() &&
          steps.outputs.branch_active.branch_active == 1
        env:
          URL: ${{ github.event.pull_request.comments_url }}
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          curl \
            -X POST \
            $URL \
            -H "Content-Type: application/json" \
            -H "Authorization: token $GITHUB_TOKEN" \
            --data '{ "body": "Test env ${{ steps.vars.outputs.deployment_url }}" }'
